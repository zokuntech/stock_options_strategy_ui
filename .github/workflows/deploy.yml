name: Deploy Stock Screener

on:
  push:
    branches: [main]
    paths:
      - 'ui/**'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'ui/**'
      - 'terraform/**'

env:
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.5.0
  NODE_VERSION: 18

jobs:
  # Build and test the frontend
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Build for production
        env:
          VITE_API_BASE_URL: ${{ github.ref == 'refs/heads/main' && 'https://your-api-domain.com' || 'http://localhost:8000' }}
          VITE_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: ui/dist/
          retention-days: 1

  # Terraform plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=stock-screener/dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Plan
        run: terraform plan -var-file="environments/dev.tfvars" -no-color
        continue-on-error: true

  # Deploy to development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: development
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./ui/dist

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=stock-screener/dev/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: terraform apply -var-file="environments/dev.tfvars" -auto-approve

      - name: Get S3 bucket name
        id: bucket
        run: echo "bucket_name=$(terraform output -raw website_bucket_name)" >> $GITHUB_OUTPUT

      - name: Sync files to S3
        run: |
          aws s3 sync ../ui/dist/ s3://${{ steps.bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Upload HTML files with shorter cache
          aws s3 sync ../ui/dist/ s3://${{ steps.bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json"

      - name: Get CloudFront distribution ID
        id: cloudfront
        run: echo "distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} \
            --paths "/*"

      - name: Get website URL
        id: url
        run: echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: '🚀 **Deployed to Development**\n\n📱 **Website:** ${{ steps.url.outputs.website_url }}'
            })

  # Deploy to production (manual approval required)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./ui/dist

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
            -backend-config="key=stock-screener/prod/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: terraform apply -var-file="environments/prod.tfvars" -auto-approve

      - name: Get S3 bucket name
        id: bucket
        run: echo "bucket_name=$(terraform output -raw website_bucket_name)" >> $GITHUB_OUTPUT

      - name: Sync files to S3
        run: |
          aws s3 sync ../ui/dist/ s3://${{ steps.bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "*.json"
          
          # Upload HTML files with shorter cache
          aws s3 sync ../ui/dist/ s3://${{ steps.bucket.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json"

      - name: Get CloudFront distribution ID
        id: cloudfront
        run: echo "distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cloudfront.outputs.distribution_id }} \
            --paths "/*"

      - name: Get website URL
        id: url
        run: echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: Comment deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: '🎉 **Deployed to Production**\n\n🌐 **Website:** ${{ steps.url.outputs.website_url }}'
            }) 