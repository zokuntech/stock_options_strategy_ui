name: Deploy Stock Screener

on:
  push:
    branches: [main]
    paths:
      - 'ui/**'
      - 'terraform/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'ui/**'
      - 'terraform/**'

env:
  AWS_REGION: us-west-2
  TERRAFORM_VERSION: 1.5.0
  NODE_VERSION: 18

# Required for OIDC
permissions:
  id-token: write
  contents: read

jobs:
  # Build and test the frontend
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build for production
        env:
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL || 'http://localhost:8000' }}
          VITE_APP_NAME: "Stock Screener"
          VITE_ENVIRONMENT: "production"
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-build
          path: ui/dist/
          retention-days: 1

  # Setup OIDC Infrastructure (one-time setup)
  setup-oidc:
    name: Setup GitHub OIDC
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      role-arn: ${{ steps.apply.outputs.github_actions_role_arn }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (for initial setup only)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        # Note: This step will only be needed for the initial OIDC setup

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init (OIDC Setup)
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan (OIDC Setup)
        working-directory: ./terraform
        run: |
          terraform plan \
            -target=aws_iam_openid_connect_provider.github \
            -target=aws_iam_role.github_actions \
            -target=aws_iam_policy.github_actions \
            -target=aws_iam_role_policy_attachment.github_actions \
            -var-file=environments/dev.tfvars \
            -out=oidc.tfplan

      - name: Terraform Apply (OIDC Setup)
        id: apply
        working-directory: ./terraform
        run: |
          terraform apply oidc.tfplan
          echo "github_actions_role_arn=$(terraform output -raw github_actions_role_arn)" >> $GITHUB_OUTPUT

  # Terraform plan for infrastructure
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [build, setup-oidc]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup-oidc.outputs.role-arn }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var-file=environments/dev.tfvars \
            -out=dev.tfplan

      - name: Comment PR with plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('./terraform/dev.tfplan', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan\n\`\`\`\n${plan}\n\`\`\``
            });

  # Deploy to development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, setup-oidc]
    if: github.ref == 'refs/heads/main'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup-oidc.outputs.role-arn }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ui-build
          path: ui/dist/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: |
          terraform apply \
            -var-file=environments/dev.tfvars \
            -auto-approve

      - name: Get S3 bucket name
        id: terraform-output
        working-directory: ./terraform
        run: |
          echo "bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: Sync files to S3
        run: |
          aws s3 sync ui/dist/ s3://${{ steps.terraform-output.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          # Set shorter cache for HTML files
          aws s3 sync ui/dist/ s3://${{ steps.terraform-output.outputs.bucket_name }}/ \
            --cache-control "public, max-age=300" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.terraform-output.outputs.cloudfront_distribution_id }} \
            --paths "/*"

      - name: Output deployment URL
        run: |
          echo "ðŸš€ Deployment successful!"
          echo "ðŸ“± Website URL: ${{ steps.terraform-output.outputs.website_url }}"

  # Deploy to production (manual approval required)
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, setup-oidc, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup-oidc.outputs.role-arn }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ui-build
          path: ui/dist/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply (Production)
        working-directory: ./terraform
        run: |
          terraform apply \
            -var-file=environments/prod.tfvars \
            -auto-approve

      - name: Get S3 bucket name (Production)
        id: terraform-output
        working-directory: ./terraform
        run: |
          echo "bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "website_url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: Sync files to S3 (Production)
        run: |
          aws s3 sync ui/dist/ s3://${{ steps.terraform-output.outputs.bucket_name }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"
          
          aws s3 sync ui/dist/ s3://${{ steps.terraform-output.outputs.bucket_name }}/ \
            --cache-control "public, max-age=300" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront (Production)
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.terraform-output.outputs.cloudfront_distribution_id }} \
            --paths "/*"

      - name: Output production deployment URL
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "ðŸ“± Production URL: ${{ steps.terraform-output.outputs.website_url }}" 